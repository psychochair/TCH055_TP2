//1.1
SELECT DISTINCT COUNTRY_NAME 

FROM COUNTRIES; 

  
//1.2
SELECT  LIST_PRICE 

FROM PRODUCTS 

WHERE LIST_PRICE>STANDARD_COST*1.40; 

  
//1.3
SELECT DISTINCT NAME 

FROM CUSTOMERS 

WHERE ADDRESS LIKE '%IN' AND CREDIT_LIMIT>150; 

  
//1.4
SELECT DISTINCT FIRST_NAME || ' ' ||LAST_NAME as FULL_NAME 

FROM CONTACTS 

WHERE PHONE like '+49%3'; 

  

 
//1.5
SELECT DISTINCT SUBSTR(ADDRESS,-4) AS ETAT 

FROM CUSTOMERS   

WHERE SUBSTR(ADDRESS,-4) LIKE '%, __'; 

//2.1
SELECT DISTINCT PRODUCT_ID,PRODUCT_NAME,CATEGORY_NAME

FROM PRODUCTS, PRODUCT_CATEGORIES 

WHERE CATEGORY_NAME LIKE '%Mother Board%' AND PRODUCTS.CATEGORY_ID=PRODUCT_CATEGORIES.CATEGORY_ID; 

 
//2.2
SELECT DISTINCT WAREHOUSE_NAME 

FROM WAREHOUSES,COUNTRIES,REGIONS,LOCATIONS  

WHERE WAREHOUSES.LOCATION_ID = LOCATIONS.LOCATION_ID AND LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID    

AND COUNTRIES.REGION_ID =REGIONS.REGION_ID AND REGIONS.REGION_NAME LIKE '%Asia%'; 

//2.3
SELECT DISTINCT EMPLOYEE_ID 

FROM ORDERS,EMPLOYEES 

WHERE ORDERS.SALESMAN_ID=EMPLOYEES.EMPLOYEE_ID AND ORDERS.ORDER_DATE> EMPLOYEES.HIRE_DATE  

AND ORDERS.ORDER_DATE BETWEEN EMPLOYEES.HIRE_DATE AND ADD_MONTHS(EMPLOYEES.HIRE_DATE,3) AND ORDERS.STATUS LIKE '%Shipped%'; 

//2.4
SELECT DISTINCT ORDERS.ORDER_ID,QUANTITY 

FROM ORDERS,ORDER_ITEMS 

WHERE ORDER_ITEMS.ORDER_ID=ORDERS.ORDER_ID AND EXTRACT(YEAR FROM ORDERS.ORDER_DATE) = 2017 ; 

//2.5
SELECT DISTINCT LAST_NAME,FIRST_NAME, EMPLOYEE_ID, HIRE_DATE AS INFORMATION_EMPLOYEES 

FROM EMPLOYEES 

WHERE EXTRACT(YEAR FROM HIRE_DATE) > 2016; 

  
//3.1
SELECT EMPLOYEE_ID
FROM EMPLOYEES A
LEFT JOIN ORDERS B
ON A.EMPLOYEE_ID = B.ORDER_ID
WHERE B.ORDER_ID IS NULL;

//3.2
SELECT REGION_NAME
FROM REGIONS A
LEFT JOIN WAREHOUSES B
ON A.REGION_ID = B.WAREHOUSE_ID
WHERE B.WAREHOUSE_ID IS NULL;

//3.3
SELECT A.CUSTOMER_ID, A."NAME", A."ADDRESS", A."WEBSITE", A."CREDIT_LIMIT"
FROM CUSTOMERS A
LEFT JOIN ORDERS B
ON A.CUSTOMER_ID = B.ORDER_ID
WHERE B.ORDER_ID IS NULL;

//3.4
SELECT A.ADDRESS AS ADDRESS
FROM CUSTOMERS A
UNION ALL
SELECT B.ADDRESS||', '||B.CITY||', '||B.STATE AS ADRESS
FROM LOCATIONS B
INNER JOIN WAREHOUSES C
ON B.LOCATION_ID = C.LOCATION_ID
ORDER BY ADDRESS;

//3.5
SELECT A."NAME" AS Full_name, 'CUSTOMERS' AS TYPE_PERS
FROM CUSTOMERS A
UNION ALL
SELECT FIRST_NAME||' '|| LAST_NAME AS Full_name, 'EMPLOYEES' AS TYPE_PERS
FROM EMPLOYEES
ORDER BY Full_name;

//5.1
SELECT FIRST_NAME, LAST_NAME
FROM EMPLOYEES
WHERE employee_id IN(SELECT DISTINCT manager_id FROM employees);


//5.2 Creer une vue qui organise les employees par le nombre de ventes ascendant.
CREATE VIEW ventes_par_employees AS
SELECT salesman_id as salesman_id, COUNT(order_id) as sales_num
FROM orders 
GROUP BY salesman_id
ORDER BY COUNT(order_id) ASC;

//Affiche le nombre de ventes par employees. La présence de la 2e ligne dépend de l'interpretation de la question
SELECT * FROM ventes_par_employees
WHERE salesman_id IS NOT NULL;
//Affiche l'employee avec le plus grand nombre de ventes
SELECT salesman_id, sales_num
FROM ventes_par_employees
WHERE sales_num IN (SELECT MAX(sales_num) FROM ventes_par_employees);


//5.3
SELECT product_id FROM inventories
WHERE product_id NOT IN(SELECT product_id FROM order_items);


// 5.4 
SELECT warehouse_id, STATS_MODE(category_id) AS most_
FROM
(
    SELECT DISTINCT category_id, O.product_id
    FROM ORDER_ITEMS O
    INNER JOIN products P 
        ON O.product_id = P.product_id
) TAB
INNER JOIN inventories I 
    ON I.product_id = TAB.product_id
GROUP BY warehouse_id
 
